// Simple Arithmetics Grammar
// ==========================
//
// Accepts expressions like "2 * (3 + 4)" and computes their value.

Expression
  = head:Factor tail:(_ ("+" / "-" / "*" / "/" / "<>") _ Factor)* {
      return tail.reduce(function(result, element) {
      const oper = (() => {
        const operandBindings = {
          "+": "ADD",
          "-": "MINUS",
          "*": "MULTIPLY",
          "/": "DIVIDE",
          "<>": "CONCAT"
        }
        return operandBindings[element[1]];
      })();
          return {
            type: "BinaryExpression",
            operator: oper,
            left: result,
            right: element[3]
          }
      }, head);
    }

Factor
  = "(" _ expr:Expression _ ")" { return expr; }
  / String
  / Float
  / Integer
  / Variable

Integer "integer"
  = _ [0-9]+ {
      return {
        type: "Literal",
        value: parseInt(text(), 10)
      }
    }

Variable "variable"
  = _ [A-Z]+[0-9]+ {
      return {
        type: "Variable",
        value: Number.isNaN(Number(text())) ? text() : Number(text())
      }
    }

Float "float"
  = _ [0-9]+"."[0-9]+ {
      return {
        type: "Literal",
        value: parseFloat(text(), 10)
      }
    }

_ "whitespace"
  = [ \t\n\r]*


String "string"
  = "'" chars:char* "'" { return {
    type: "Literal",
    value: chars.join("")
  } }
  / '"' chars:char* '"' { return {
    type: "Literal",
    value: chars.join("")
  } }

char
  = [^\0-\x1F\x22\x5C\x27]
  / "\\"
    sequence:(
        '"'
      / "'"
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$([0-9a-f]i [0-9a-f]i [0-9a-f]i [0-9a-f]i) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence }
